// Whiteboard.jsx.new
import React, { useRef, useEffect, useState } from "react";
import jsPDF from "jspdf";
import { io } from "socket.io-client";
import { useParams } from "react-router-dom";

const colors = ["black", "red", "green", "blue", "orange", "purple", "yellow", "brown"];
const brushSizes = [2, 4, 6, 8, 10, 12, 14];

const Whiteboard = () => {
  const { workspaceId } = useParams();
  const [socket, setSocket] = useState(null);

  // All your existing state and refs
  const canvasRef = useRef(null);
  const ctxRef = useRef(null);
  const [drawing, setDrawing] = useState(false);
  const [color, setColor] = useState("black");
  const [brushSize, setBrushSize] = useState(4);
  const [isEraser, setIsEraser] = useState(false);
  const [history, setHistory] = useState([]);
  const [redoStack, setRedoStack] = useState([]);
  const [tool, setTool] = useState("pen");
  const [shapeStart, setShapeStart] = useState(null);
  const [previewShape, setPreviewShape] = useState(null);
  const [uploadedImg, setUploadedImg] = useState(null);
  const [imgPos, setImgPos] = useState(null);
  const [isDraggingImg, setIsDraggingImg] = useState(false);
  const [imgOffset, setImgOffset] = useState({ x: 0, y: 0 });
  const [imgPreviewSize, setImgPreviewSize] = useState({ width: 200, height: 200 });
  const [customColors, setCustomColors] = useState([...colors.slice(0, 7)]);
  const [showColorPicker, setShowColorPicker] = useState(false);
  const [newColor, setNewColor] = useState("#000000");
  const [isEyedropper, setIsEyedropper] = useState(false);

  // All your existing useEffect hooks and functions here
  // ... (keep all the existing logic)

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-100 via-purple-100 to-pink-100 flex flex-col items-center justify-start py-10 px-2">
      <div className="w-full max-w-5xl mx-auto">
        {/* Tools Header */}
        <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-6 mb-8">
          <h1 className="text-5xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-blue-600 via-purple-500 to-pink-400 drop-shadow-lg select-none text-center md:text-left">
            ðŸŽ¨ Whiteboard
          </h1>
          <div className="flex flex-wrap gap-3 items-center justify-center md:justify-end">
            <select
              value={tool}
              onChange={(e) => setTool(e.target.value)}
              className="px-3 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-400 text-base font-semibold bg-white shadow-sm transition-all duration-150"
            >
              <option value="pen">Pen</option>
              <option value="rect">Rectangle</option>
              <option value="circle">Circle</option>
              <option value="line">Line</option>
              <option value="arrow">Arrow</option>
            </select>
            <select
              onChange={(e) => setBrushSize(parseInt(e.target.value))}
              value={brushSize}
              className="px-3 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-400 text-base font-semibold bg-white shadow-sm transition-all duration-150"
            >
              {brushSizes.map((size) => (
                <option key={size} value={size}>
                  {size}px
                </option>
              ))}
            </select>
            <div className="flex gap-1 flex-wrap">
              {colors.map((c) => (
                <button
                  key={c}
                  className={`w-8 h-8 rounded-full border-2 transition-all duration-150 ${
                    color === c && !isEraser ? "border-blue-600 scale-110 shadow-lg" : "border-gray-300"
                  } hover:scale-110`}
                  style={{ backgroundColor: c }}
                  onClick={() => setColor(c)}
                />
              ))}
            </div>
            <button
              onClick={() => setIsEraser(!isEraser)}
              className={`px-4 py-2 rounded-lg font-semibold border transition-all duration-150 ${
                isEraser ? "bg-red-100 border-red-400 text-red-700" : "bg-gray-100 border-gray-300 text-gray-700"
              } hover:bg-red-200`}
            >
              {isEraser ? "Eraser ON" : "Eraser OFF"}
            </button>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="flex flex-col gap-4 mb-6">
          <div className="flex flex-wrap gap-3 items-center justify-between">
            {/* Left group - Basic actions */}
            <div className="flex gap-2">
              <button onClick={handleUndo} className="px-4 py-2 rounded-lg font-semibold border border-yellow-400 bg-yellow-100 text-yellow-700 hover:bg-yellow-200 transition-all duration-150">
                Undo
              </button>
              <button onClick={clearCanvas} className="px-4 py-2 rounded-lg font-semibold border border-red-400 bg-red-100 text-red-700 hover:bg-red-200 transition-all duration-150">
                Clear
              </button>
              <button onClick={downloadCanvas} className="px-4 py-2 rounded-lg font-semibold border border-green-400 bg-green-100 text-green-700 hover:bg-green-200 transition-all duration-150">
                Download
              </button>
            </div>

            {/* Right group - Export options */}
            <div className="flex gap-2">
              <button onClick={() => exportImage("png")} className="px-4 py-2 rounded-lg font-semibold border border-blue-400 bg-blue-50 text-blue-700 hover:bg-blue-100 transition-all duration-150">
                Export PNG
              </button>
              <button onClick={() => exportImage("jpeg")} className="px-4 py-2 rounded-lg font-semibold border border-pink-400 bg-pink-50 text-pink-700 hover:bg-pink-100 transition-all duration-150">
                Export JPG
              </button>
              <button onClick={() => exportImage("svg")} className="px-4 py-2 rounded-lg font-semibold border border-purple-400 bg-purple-50 text-purple-700 hover:bg-purple-100 transition-all duration-150">
                Export SVG
              </button>
              <button onClick={exportAsPDF} className="px-4 py-2 rounded-lg font-semibold border border-red-400 bg-red-50 text-red-700 hover:bg-red-100 transition-all duration-150">
                Export PDF
              </button>
            </div>
          </div>

          {/* Upload Image row */}
          <div className="flex justify-center">
            <div className="flex gap-2 items-center">
              <label className="px-4 py-2 rounded-lg font-semibold border border-blue-400 bg-blue-50 text-blue-700 cursor-pointer hover:bg-blue-100 transition-all duration-150">
                Upload Image
                <input type="file" accept="image/*" onChange={handleImageUpload} className="hidden" />
              </label>
              {uploadedImg && (
                <button onClick={commitImageToCanvas} className="px-4 py-2 rounded-lg font-semibold border border-green-400 bg-green-100 text-green-700 hover:bg-green-200 ml-2">
                  Place Image
                </button>
              )}
            </div>
          </div>
        </div>

        {/* Canvas Container */}
        <div className="relative rounded-3xl shadow-2xl border-4 border-blue-200 bg-white/90 p-4 flex items-center justify-center min-h-[500px] max-h-[700px] overflow-auto touch-pan-x touch-pan-y">
          <div className="relative w-full h-full">
            <canvas
              ref={canvasRef}
              onMouseDown={handlePointerDown}
              onTouchStart={handlePointerDown}
              onMouseMove={handlePointerMove}
              onTouchMove={handlePointerMove}
              onMouseUp={handlePointerUp}
              onTouchEnd={handlePointerUp}
              onMouseLeave={handlePointerUp}
              className="block mx-auto rounded-2xl shadow-lg border border-gray-300 bg-white cursor-crosshair select-none min-w-[800px] min-h-[500px]"
              style={{ maxWidth: "1600px", maxHeight: "1200px" }}
            />
            {uploadedImg && imgPos && (
              <img
                src={uploadedImg.src}
                alt="preview"
                style={{
                  position: "absolute",
                  left: imgPos.x,
                  top: imgPos.y,
                  width: imgPreviewSize.width,
                  height: imgPreviewSize.height,
                  pointerEvents: "none",
                  opacity: 0.7,
                  zIndex: 20,
                }}
              />
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Whiteboard;